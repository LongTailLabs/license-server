package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func schema_restriction_schema() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xbc, 0x92,
		0xc1, 0x72, 0xf2, 0x20, 0x14, 0x85, 0xf7, 0x79, 0x8a, 0x0c, 0xbf, 0x0b,
		0x33, 0xf3, 0x6b, 0x34, 0xea, 0xa2, 0xee, 0x3a, 0x7d, 0x80, 0x76, 0x6f,
		0xe8, 0x0c, 0x0d, 0x57, 0xc5, 0x31, 0x90, 0x02, 0x99, 0x69, 0x27, 0xe6,
		0xdd, 0x7b, 0xc1, 0x34, 0x45, 0x47, 0x17, 0xb6, 0x9d, 0x2e, 0x04, 0xfc,
		0x2e, 0xe7, 0x70, 0xc2, 0xa5, 0x89, 0xe2, 0x98, 0x0c, 0x4c, 0xb1, 0x85,
		0x92, 0x91, 0x65, 0x4c, 0xb6, 0xd6, 0x56, 0xcb, 0x34, 0xdd, 0x19, 0x25,
		0x47, 0x47, 0x3a, 0x56, 0x7a, 0x93, 0x72, 0xcd, 0xd6, 0x76, 0x34, 0x99,
		0xa7, 0x47, 0xf6, 0x8f, 0xfc, 0x77, 0x3a, 0x25, 0xe1, 0x71, 0x8d, 0xaa,
		0x15, 0xfe, 0x89, 0xe3, 0xc6, 0x8f, 0x88, 0xed, 0x7b, 0x05, 0xce, 0x4b,
		0xbd, 0xec, 0xa0, 0xb0, 0x7e, 0xab, 0xe7, 0x1a, 0x5e, 0x6b, 0xa1, 0x81,
		0xf7, 0x0a, 0x4f, 0x8b, 0x3d, 0x33, 0xa6, 0xdf, 0xe4, 0x80, 0xaa, 0xa5,
		0x05, 0x1d, 0xa2, 0x92, 0xbd, 0x89, 0xb2, 0x2e, 0x49, 0x47, 0x68, 0x6f,
		0x59, 0x69, 0x55, 0x81, 0xb6, 0x02, 0x0c, 0x9a, 0x36, 0xe7, 0xa6, 0x21,
		0x0a, 0x72, 0x19, 0xab, 0x85, 0xdc, 0x04, 0xfe, 0x58, 0x03, 0x89, 0xf6,
		0x98, 0xcb, 0x1d, 0xf5, 0xe0, 0x02, 0x10, 0xda, 0x97, 0xdb, 0x0b, 0xe1,
		0xbe, 0x61, 0x1d, 0x30, 0xa4, 0xac, 0x28, 0xe0, 0xe4, 0xbb, 0x3d, 0xad,
		0x0d, 0x90, 0x80, 0x5c, 0xce, 0xf0, 0x79, 0x1b, 0x57, 0x32, 0x08, 0x0c,
		0xb8, 0x39, 0xb9, 0x3f, 0xa7, 0x11, 0xb2, 0xd3, 0x4c, 0xbe, 0x3c, 0xa3,
		0x33, 0x6f, 0xc2, 0x38, 0x17, 0x56, 0x28, 0xc9, 0xf6, 0x4f, 0xe1, 0xc5,
		0xae, 0xd9, 0xde, 0x40, 0x14, 0x6c, 0xfd, 0xb5, 0x56, 0x0b, 0xae, 0xff,
		0xa2, 0xa9, 0x12, 0xec, 0x3d, 0xc7, 0xa3, 0xae, 0xf4, 0xd4, 0xa5, 0xb8,
		0xc1, 0xb6, 0x62, 0x16, 0x9f, 0x80, 0x74, 0xe5, 0xe7, 0xe1, 0x70, 0x35,
		0x19, 0xdd, 0xd1, 0xc3, 0x6a, 0x8a, 0xe3, 0x71, 0x39, 0xf5, 0x53, 0x93,
		0xb5, 0x87, 0x0c, 0x57, 0xf3, 0x8e, 0x66, 0x0b, 0x9c, 0x17, 0x34, 0xc9,
		0xf3, 0x71, 0xd2, 0xcc, 0xda, 0x5b, 0x65, 0xc3, 0x3c, 0x4f, 0xf1, 0xc7,
		0x9d, 0x22, 0xa3, 0x6e, 0x31, 0xc3, 0x42, 0x46, 0x93, 0x64, 0x40, 0x7e,
		0xd4, 0xd0, 0xc8, 0xbd, 0xb2, 0xf6, 0x23, 0x00, 0x00, 0xff, 0xff, 0xd2,
		0xff, 0xf8, 0xc7, 0x07, 0x04, 0x00, 0x00,
		},
		"schema/restriction.schema",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"schema/restriction.schema": schema_restriction_schema,

}
